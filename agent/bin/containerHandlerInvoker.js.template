const { spawn } = require('child_process');

const debug = log => console.log(`##vso[task.debug]${log}`);

let stdinString = '';
process.stdin.on('data', chunk => stdinString += chunk);

process.stdin.on('end', () => {
    const { handler, args: handlerArg, workDir: handlerWorkDir, prependPath, environment } = JSON.parse(stdinString);

    debug(`Handler: ${handler}`);
    debug(`HandlerArg: ${handlerArg}`);
    debug(`HandlerWorkDir: ${handlerWorkDir}`);

    for (const key in environment) {
        const value = environment[key].toString().replace(/\r/g, '%0D').replace(/\n/g, '%0A');
        debug(`Set env: ${key}=${value}`);
        process.env[key] = environment[key];
    }

    const options = {
        stdio: 'inherit',
        cwd: handlerWorkDir
    };

    const isWindows = process.platform == 'win32';

    if (isWindows) {
        options.argv0 = `"${handler}"`;
        options.windowsVerbatimArguments = true;
    }

    if (prependPath && prependPath.length > 0) {
        const currentPath = process.env['PATH'];
        process.env['PATH'] = prependPath;

        if (currentPath && currentPath.length > 0) {
            process.env['PATH'] += `${isWindows ? ';' : ':'}${currentPath}`;
        }

        debug(`Prepend Path: ${process.env['PATH']}`);
    }

    process.env['TF_BUILD'] = 'True';
    debug(`Handler Setup Complete`);
    const launch = spawn(handler, [handlerArg], options);

    launch.on('exit', code => {
        debug(`Handler exit code: ${code}`);

        if (code != 0) {
            process.exit(code);
        }
    });
});
